// Code generated by " ../../../../github.com/grailbio/base/gtl/generate.py --PREFIX=callFrame --package=gql --output=call_frame_pool.go -DELEM=*callFrame -DMAXSIZE=1024 ../../../../github.com/grailbio/base/gtl/freepool.go.tpl ". DO NOT EDIT.

package gql

// A freepool for a single thread. The interface is the same as sync.Pool, but
// it avoids locks and interface conversion overhead.
//
// Example:
//  generate.py -package=foo -prefix=int -D*callFrame=foo -D1024=128
//
//
// Parameters:
//  *callFrame: the object to be kept in the freepool
//  1024: the maxium number of objects to keep in the freepool

type callFramePool struct {
	New func() *callFrame
	p   []*callFrame
}

func (p *callFramePool) Get() *callFrame {
	if len(p.p) == 0 {
		return p.New()
	}
	tmp := p.p[len(p.p)-1]
	p.p = p.p[:len(p.p)-1]
	return tmp
}

func (p *callFramePool) Put(tmp *callFrame) {
	if len(p.p) < 1024 {
		p.p = append(p.p, tmp)
	}
}
