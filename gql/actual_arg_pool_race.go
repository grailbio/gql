// Code generated by " ../../../../github.com/grailbio/base/gtl/generate.py --output=actual_arg_pool_race.go --prefix=actualArg --PREFIX=actualArg --package=gql -DELEM=[]ActualArg ../../../../github.com/grailbio/base/gtl/randomized_freepool_race.go.tpl ". DO NOT EDIT.

// +build race

package gql

import "sync/atomic"

type actualArgFreePool struct {
	new func() []ActualArg
	len int64
}

func NewactualArgFreePool(new func() []ActualArg, maxSize int) *actualArgFreePool {
	return &actualArgFreePool{new: new}
}

func (p *actualArgFreePool) Put(x []ActualArg) {
	atomic.AddInt64(&p.len, -1)
}

func (p *actualArgFreePool) Get() []ActualArg {
	atomic.AddInt64(&p.len, 1)
	return p.new()
}

func (p *actualArgFreePool) ApproxLen() int { return int(atomic.LoadInt64(&p.len)) }
