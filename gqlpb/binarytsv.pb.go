// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go/src/github.com/grailbio/gql/proto/binarytsv.proto

package gqlpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BinaryTSVIndex struct {
	Rows             int64                         `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Column           []BinaryTSVIndex_Column       `protobuf:"bytes,2,rep,name=column,proto3" json:"column"`
	TimeLocation     []BinaryTSVIndex_TimeLocation `protobuf:"bytes,3,rep,name=time_location,json=timeLocation,proto3" json:"time_location"`
	Name             string                        `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Path             string                        `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Description      []string                      `protobuf:"bytes,4,rep,name=description,proto3" json:"description,omitempty"`
	MarshaledContext []byte                        `protobuf:"bytes,7,opt,name=marshaled_context,json=marshaledContext,proto3" json:"marshaled_context,omitempty"`
}

func (m *BinaryTSVIndex) Reset()         { *m = BinaryTSVIndex{} }
func (m *BinaryTSVIndex) String() string { return proto.CompactTextString(m) }
func (*BinaryTSVIndex) ProtoMessage()    {}
func (*BinaryTSVIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b5b4d6a3850c3a, []int{0}
}
func (m *BinaryTSVIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryTSVIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryTSVIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryTSVIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryTSVIndex.Merge(m, src)
}
func (m *BinaryTSVIndex) XXX_Size() int {
	return m.Size()
}
func (m *BinaryTSVIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryTSVIndex.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryTSVIndex proto.InternalMessageInfo

func (m *BinaryTSVIndex) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *BinaryTSVIndex) GetColumn() []BinaryTSVIndex_Column {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *BinaryTSVIndex) GetTimeLocation() []BinaryTSVIndex_TimeLocation {
	if m != nil {
		return m.TimeLocation
	}
	return nil
}

func (m *BinaryTSVIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryTSVIndex) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *BinaryTSVIndex) GetDescription() []string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *BinaryTSVIndex) GetMarshaledContext() []byte {
	if m != nil {
		return m.MarshaledContext
	}
	return nil
}

type BinaryTSVIndex_Column struct {
	Col         int32  `protobuf:"varint,1,opt,name=col,proto3" json:"col,omitempty"`
	Typ         int32  `protobuf:"varint,2,opt,name=typ,proto3" json:"typ,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BinaryTSVIndex_Column) Reset()         { *m = BinaryTSVIndex_Column{} }
func (m *BinaryTSVIndex_Column) String() string { return proto.CompactTextString(m) }
func (*BinaryTSVIndex_Column) ProtoMessage()    {}
func (*BinaryTSVIndex_Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b5b4d6a3850c3a, []int{0, 0}
}
func (m *BinaryTSVIndex_Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryTSVIndex_Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryTSVIndex_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryTSVIndex_Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryTSVIndex_Column.Merge(m, src)
}
func (m *BinaryTSVIndex_Column) XXX_Size() int {
	return m.Size()
}
func (m *BinaryTSVIndex_Column) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryTSVIndex_Column.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryTSVIndex_Column proto.InternalMessageInfo

func (m *BinaryTSVIndex_Column) GetCol() int32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func (m *BinaryTSVIndex_Column) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *BinaryTSVIndex_Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryTSVIndex_Column) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BinaryTSVIndex_TimeLocation struct {
	Str     string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OffsetS int32  `protobuf:"varint,3,opt,name=offset_s,json=offsetS,proto3" json:"offset_s,omitempty"`
}

func (m *BinaryTSVIndex_TimeLocation) Reset()         { *m = BinaryTSVIndex_TimeLocation{} }
func (m *BinaryTSVIndex_TimeLocation) String() string { return proto.CompactTextString(m) }
func (*BinaryTSVIndex_TimeLocation) ProtoMessage()    {}
func (*BinaryTSVIndex_TimeLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b5b4d6a3850c3a, []int{0, 1}
}
func (m *BinaryTSVIndex_TimeLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryTSVIndex_TimeLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryTSVIndex_TimeLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryTSVIndex_TimeLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryTSVIndex_TimeLocation.Merge(m, src)
}
func (m *BinaryTSVIndex_TimeLocation) XXX_Size() int {
	return m.Size()
}
func (m *BinaryTSVIndex_TimeLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryTSVIndex_TimeLocation.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryTSVIndex_TimeLocation proto.InternalMessageInfo

func (m *BinaryTSVIndex_TimeLocation) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *BinaryTSVIndex_TimeLocation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryTSVIndex_TimeLocation) GetOffsetS() int32 {
	if m != nil {
		return m.OffsetS
	}
	return 0
}

func init() {
	proto.RegisterType((*BinaryTSVIndex)(nil), "grail.proto.gql.BinaryTSVIndex")
	proto.RegisterType((*BinaryTSVIndex_Column)(nil), "grail.proto.gql.BinaryTSVIndex.Column")
	proto.RegisterType((*BinaryTSVIndex_TimeLocation)(nil), "grail.proto.gql.BinaryTSVIndex.TimeLocation")
}

func init() {
	proto.RegisterFile("go/src/github.com/grailbio/gql/proto/binarytsv.proto", fileDescriptor_d4b5b4d6a3850c3a)
}

var fileDescriptor_d4b5b4d6a3850c3a = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0xcb, 0xd3, 0x30,
	0x1c, 0xc6, 0x9b, 0x75, 0xeb, 0x5c, 0x36, 0x75, 0xe6, 0x54, 0x07, 0xd6, 0xe2, 0x41, 0x0a, 0x6a,
	0x0b, 0x2a, 0x78, 0xdf, 0xbc, 0x08, 0x82, 0x90, 0x0d, 0x05, 0x2f, 0xa3, 0xed, 0xb2, 0x2e, 0x90,
	0x36, 0x5d, 0x92, 0xe9, 0xf6, 0x2d, 0xfc, 0x58, 0x3b, 0xee, 0xe8, 0x49, 0x64, 0xfb, 0x00, 0x7e,
	0x05, 0x49, 0x32, 0x46, 0xdf, 0xbd, 0xbc, 0xbc, 0xb7, 0xe7, 0xff, 0x34, 0xcf, 0xef, 0xff, 0xa4,
	0x2d, 0x7c, 0x5f, 0xf0, 0x44, 0x8a, 0x3c, 0x29, 0xa8, 0x5a, 0x6d, 0xb2, 0x38, 0xe7, 0x65, 0x52,
	0x88, 0x94, 0xb2, 0x8c, 0xf2, 0xa4, 0x58, 0xb3, 0xa4, 0x16, 0x5c, 0xf1, 0x24, 0xa3, 0x55, 0x2a,
	0x76, 0x4a, 0xfe, 0x88, 0xcd, 0x8c, 0x1e, 0x9b, 0x33, 0x76, 0x88, 0x8b, 0x35, 0x1b, 0xbd, 0x69,
	0xe6, 0x79, 0xc1, 0x6d, 0x2e, 0xdb, 0x2c, 0xcd, 0x64, 0x21, 0x5a, 0xd9, 0xc8, 0x8b, 0x7f, 0x2e,
	0x7c, 0x34, 0x36, 0xcc, 0xd9, 0xf4, 0xeb, 0xa7, 0x6a, 0x41, 0xb6, 0x08, 0xc1, 0xb6, 0xe0, 0x3f,
	0xa5, 0x0f, 0x42, 0x10, 0xb9, 0xd8, 0x68, 0xf4, 0x11, 0x7a, 0x39, 0x67, 0x9b, 0xb2, 0xf2, 0x5b,
	0xa1, 0x1b, 0xf5, 0xdf, 0xbe, 0x8c, 0xaf, 0xf6, 0xc6, 0x37, 0x21, 0xf1, 0xc4, 0x9c, 0x1e, 0xb7,
	0xf7, 0x7f, 0x9e, 0x3b, 0xf8, 0x9c, 0x45, 0xdf, 0xe0, 0x43, 0x45, 0x4b, 0x32, 0x67, 0x3c, 0x4f,
	0x15, 0xe5, 0x95, 0xef, 0x1a, 0xd8, 0xeb, 0xfb, 0x60, 0x33, 0x5a, 0x92, 0xcf, 0xe7, 0xcc, 0x19,
	0x39, 0x50, 0x0d, 0x4f, 0x57, 0xae, 0xd2, 0x92, 0xf8, 0x9d, 0x10, 0x44, 0x3d, 0x6c, 0xb4, 0xf6,
	0xea, 0x54, 0xad, 0x7c, 0xcf, 0x7a, 0x5a, 0xa3, 0x10, 0xf6, 0x17, 0x44, 0xe6, 0x82, 0xd6, 0x66,
	0x7d, 0x3b, 0x74, 0xa3, 0x1e, 0x6e, 0x5a, 0xe8, 0x15, 0x7c, 0x52, 0xa6, 0x42, 0xae, 0x52, 0x46,
	0x16, 0xf3, 0x9c, 0x57, 0x8a, 0x6c, 0x95, 0xdf, 0x0d, 0x41, 0x34, 0xc0, 0xc3, 0xcb, 0x83, 0x89,
	0xf5, 0x47, 0x19, 0xf4, 0xec, 0x3d, 0xd1, 0x10, 0xba, 0x39, 0x67, 0xe6, 0x95, 0x75, 0xb0, 0x96,
	0xda, 0x51, 0xbb, 0xda, 0x6f, 0x59, 0x47, 0xed, 0xea, 0x4b, 0x49, 0xb7, 0x51, 0xf2, 0x56, 0x21,
	0x70, 0x55, 0x68, 0xf4, 0x05, 0x0e, 0x9a, 0xd7, 0xd7, 0x5c, 0xa9, 0x84, 0xd9, 0xd4, 0xc3, 0x5a,
	0x5e, 0xb8, 0xad, 0x06, 0xf7, 0x29, 0x7c, 0xc0, 0x97, 0x4b, 0x49, 0xd4, 0x5c, 0x9a, 0x7d, 0x1d,
	0xdc, 0xb5, 0xf3, 0x74, 0xfc, 0x61, 0x7f, 0x0c, 0xc0, 0xe1, 0x18, 0x80, 0xbf, 0xc7, 0x00, 0xfc,
	0x3a, 0x05, 0xce, 0xe1, 0x14, 0x38, 0xbf, 0x4f, 0x81, 0xf3, 0xfd, 0xd9, 0x5d, 0xbf, 0x5e, 0xb1,
	0x66, 0x75, 0x96, 0x79, 0xe6, 0xfb, 0xbc, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xa2, 0x0e,
	0x43, 0xa9, 0x02, 0x00, 0x00,
}

func (m *BinaryTSVIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryTSVIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rows != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(m.Rows))
	}
	if len(m.Column) > 0 {
		for _, msg := range m.Column {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBinarytsv(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TimeLocation) > 0 {
		for _, msg := range m.TimeLocation {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBinarytsv(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Description) > 0 {
		for _, s := range m.Description {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.MarshaledContext) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.MarshaledContext)))
		i += copy(dAtA[i:], m.MarshaledContext)
	}
	return i, nil
}

func (m *BinaryTSVIndex_Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryTSVIndex_Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Col != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(m.Col))
	}
	if m.Typ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(m.Typ))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *BinaryTSVIndex_TimeLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryTSVIndex_TimeLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.OffsetS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBinarytsv(dAtA, i, uint64(m.OffsetS))
	}
	return i, nil
}

func encodeVarintBinarytsv(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BinaryTSVIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rows != 0 {
		n += 1 + sovBinarytsv(uint64(m.Rows))
	}
	if len(m.Column) > 0 {
		for _, e := range m.Column {
			l = e.Size()
			n += 1 + l + sovBinarytsv(uint64(l))
		}
	}
	if len(m.TimeLocation) > 0 {
		for _, e := range m.TimeLocation {
			l = e.Size()
			n += 1 + l + sovBinarytsv(uint64(l))
		}
	}
	if len(m.Description) > 0 {
		for _, s := range m.Description {
			l = len(s)
			n += 1 + l + sovBinarytsv(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	l = len(m.MarshaledContext)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	return n
}

func (m *BinaryTSVIndex_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Col != 0 {
		n += 1 + sovBinarytsv(uint64(m.Col))
	}
	if m.Typ != 0 {
		n += 1 + sovBinarytsv(uint64(m.Typ))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	return n
}

func (m *BinaryTSVIndex_TimeLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBinarytsv(uint64(l))
	}
	if m.OffsetS != 0 {
		n += 1 + sovBinarytsv(uint64(m.OffsetS))
	}
	return n
}

func sovBinarytsv(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinarytsv(x uint64) (n int) {
	return sovBinarytsv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BinaryTSVIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinarytsv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryTSVIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryTSVIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = append(m.Column, BinaryTSVIndex_Column{})
			if err := m.Column[len(m.Column)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeLocation = append(m.TimeLocation, BinaryTSVIndex_TimeLocation{})
			if err := m.TimeLocation[len(m.TimeLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = append(m.Description, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshaledContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarshaledContext = append(m.MarshaledContext[:0], dAtA[iNdEx:postIndex]...)
			if m.MarshaledContext == nil {
				m.MarshaledContext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinarytsv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryTSVIndex_Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinarytsv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinarytsv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryTSVIndex_TimeLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinarytsv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinarytsv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetS", wireType)
			}
			m.OffsetS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBinarytsv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBinarytsv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinarytsv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinarytsv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinarytsv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBinarytsv
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBinarytsv
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBinarytsv
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBinarytsv(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBinarytsv
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBinarytsv = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinarytsv   = fmt.Errorf("proto: integer overflow")
)
